trigger:
- develop
- master
- release/*
- hotfix/*

pr:
- develop
- release/*
- hotfix/*

jobs:
  # Build
  - job: Build
    pool:
      vmImage: 'windows-2022'
    steps:
    # .NET 5 required for GitVersion
    - task: UseDotNet@2
      inputs:
        version: '5.x'
      displayName: 'Install .NET 5'
    - task: UseDotNet@2
      inputs:
        version: '6.x'
      displayName: 'Install .NET 6'
    - task: UseDotNet@2
      inputs:
        version: '7.x'
      displayName: 'Install .NET 7'
    - task: UseDotNet@2
      inputs:
        version: '8.x'
      displayName: 'Install .NET 8'
    - powershell: ./build.ps1
      displayName: 'Build'
    - publish: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      artifact: NuGet Package
      displayName: 'Publish NuGet package as build artifact'
  # Integration Tests Windows Server 2019 (.NET tool)
  - job: Test_Windows_DotNetTool
    displayName: Integration Tests Windows Server 2019 (.NET tool)
    dependsOn: Build
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '6.x'
      displayName: 'Install .NET 6'
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install NodeJs 14.x'
    - powershell: choco install markdownlint-cli --no-progress
      displayName: 'Install required tools'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - powershell: ./build.ps1 --verbosity=diagnostic
      workingDirectory: ./tests/script-runner
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/script-runner/output
      artifact: Integration Tests Windows Server 2019 (.NET tool)
      displayName: 'Publish generated reports as build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/tests/script-runner/output'
        contents: '**/*.sarif'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Copy SARIF report'
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: CodeAnalysisLogs
  # Integration Tests Windows Server 2019 (Frosting .NET 6)
  - job: Test_Windows_Frosting_Net6
    displayName: Integration Tests Windows Server 2019 (Frosting .NET 6)
    dependsOn: Build
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '6.x'
      displayName: 'Install .NET 6'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - powershell: ./build.ps1 --verbosity=diagnostic
      workingDirectory: ./tests/frosting/net6
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/frosting/net6/output
      artifact: Integration Tests Windows Server 2019 (Frosting .NET 6)
      displayName: 'Publish generated reports as build artifact'
  # Integration Tests Windows Server 2022 (Frosting .NET 7)
  - job: Test_Windows_Frosting_Net7
    displayName: Integration Tests Windows Server 2022 (Frosting .NET 7)
    dependsOn: Build
    pool:
      vmImage: 'windows-2022'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '7.x'
      displayName: 'Install .NET 7'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - powershell: ./build.ps1 --verbosity=diagnostic
      workingDirectory: ./tests/frosting/net7
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/frosting/net7/output
      artifact: Integration Tests Windows Server 2022 (Frosting .NET 7)
      displayName: 'Publish generated reports as build artifact'
  # Integration Tests Windows Server 2022 (Frosting .NET 8)
  - job: Test_Windows_Frosting_Net8
    displayName: Integration Tests Windows Server 2022 (Frosting .NET 8)
    dependsOn: Build
    pool:
      vmImage: 'windows-2022'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '8.x'
      displayName: 'Install .NET 8'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - powershell: ./build.ps1 --verbosity=diagnostic
      workingDirectory: ./tests/frosting/net8
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/frosting/net8/output
      artifact: Integration Tests Windows Server 2022 (Frosting .NET 8)
      displayName: 'Publish generated reports as build artifact'
  # Integration Tests macOS 11 (.NET tool)
  - job: Test_macOS_DotNetTool
    displayName: Integration Tests macOS 11 (.NET tool)
    dependsOn: Build
    pool:
      vmImage: 'macOS-11'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '6.x'
      displayName: 'Install .NET 6'
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install NodeJs 14.x'
    - bash: |
        npm install -g markdownlint-cli
      displayName: 'Install required tools'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - bash: ./build.sh --verbosity=diagnostic
      workingDirectory: ./tests/script-runner
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/script-runner/output
      artifact: Integration Tests macOS 11 (.NET tool)
      displayName: 'Publish generated reports as build artifact'
  # Integration Tests macOS 11 (Frosting .NET 6)
  - job: Test_macOS_Frosting_Net6
    displayName: Integration Tests macOS 11 (Frosting NET 6)
    dependsOn: Build
    pool:
      vmImage: 'macOS-11'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '6.x'
      displayName: 'Install .NET 6'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - bash: ./build.sh --verbosity=diagnostic
      workingDirectory: ./tests/frosting/net6
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/frosting/net6/output
      artifact: Integration Tests macOS 11 (Frosting .NET 6)
      displayName: 'Publish generated reports as build artifact'
  # Integration Tests macOS 13 (Frosting .NET 7)
  - job: Test_macOS_Frosting_Net7
    displayName: Integration Tests macOS 13 (Frosting NET 7)
    dependsOn: Build
    pool:
      vmImage: 'macOS-13'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '7.x'
      displayName: 'Install .NET 7'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - bash: ./build.sh --verbosity=diagnostic
      workingDirectory: ./tests/frosting/net7
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/frosting/net7/output
      artifact: Integration Tests macOS 13 (Frosting .NET 7)
      displayName: 'Publish generated reports as build artifact'
  # Integration Tests macOS 13 (Frosting .NET 8)
  - job: Test_macOS_Frosting_Net8
    displayName: Integration Tests macOS 13 (Frosting NET 8)
    dependsOn: Build
    pool:
      vmImage: 'macOS-13'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '8.x'
      displayName: 'Install .NET 8'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - bash: ./build.sh --verbosity=diagnostic
      workingDirectory: ./tests/frosting/net8
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/frosting/net8/output
      artifact: Integration Tests macOS 13 (Frosting .NET 8)
      displayName: 'Publish generated reports as build artifact'
  # Integration Tests Ubuntu 20.04 (.NET tool)
  - job: Test_Ubuntu_DotNetTool
    displayName: Integration Tests Ubuntu 20.04 (.NET tool)
    dependsOn: Build
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '6.x'
      displayName: 'Install .NET 6'
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install NodeJs 14.x'
    - bash: |
        npm install -g markdownlint-cli
      displayName: 'Install required tools'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - bash: ./build.sh --verbosity=diagnostic
      workingDirectory: ./tests/script-runner
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/script-runner/output
      artifact: Integration Tests Ubuntu 20.04 (.NET tool)
      displayName: 'Publish generated reports as build artifact'
  # Integration Tests Ubuntu 20.04 (Frosting .NET 6)
  - job: Test_Ubuntu_Frosting_Net6
    displayName: Integration Tests Ubuntu 20.04 (Frosting .NET 6)
    dependsOn: Build
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '6.x'
      displayName: 'Install .NET 6'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - bash: ./build.sh --verbosity=diagnostic
      workingDirectory: ./tests/frosting/net6
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/frosting/net6/output
      artifact: Integration Tests Ubuntu 20.04 (Frosting .NET 6)
      displayName: 'Publish generated reports as build artifact'
  # Integration Tests Ubuntu 22.04 (Frosting .NET 7)
  - job: Test_Ubuntu_Frosting_Net7
    displayName: Integration Tests Ubuntu 22.04 (Frosting .NET 7)
    dependsOn: Build
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '7.x'
      displayName: 'Install .NET 7'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - bash: ./build.sh --verbosity=diagnostic
      workingDirectory: ./tests/frosting/net7
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/frosting/net7/output
      artifact: Integration Tests Ubuntu 22.04 (Frosting .NET 7)
      displayName: 'Publish generated reports as build artifact'
  # Integration Tests Ubuntu 22.04 (Frosting .NET 8)
  - job: Test_Ubuntu_Frosting_Net8
    displayName: Integration Tests Ubuntu 22.04 (Frosting .NET 8)
    dependsOn: Build
    pool:
      vmImage: 'ubuntu-22.04'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '8.x'
      displayName: 'Install .NET 8'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - bash: ./build.sh --verbosity=diagnostic
      workingDirectory: ./tests/frosting/net8
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/frosting/net8/output
      artifact: Integration Tests Ubuntu 22.04 (Frosting .NET 8)
      displayName: 'Publish generated reports as build artifact'
  # SARIF file deployment
  # - job: Deploy_Sarif_Files
  #   displayName: Sarif File deployment
  #   dependsOn: [ Test_Windows_DotNetFramework, Test_Windows_DotNetCoreTool, Test_macOS_Mono, Test_macOS_DotNetCoreTool, Test_ubuntu_Mono, Test_ubuntu_DotNetCoreTool ]
  #   pool:
  #     vmImage: 'ubuntu-16.04'
  #   steps:
  #   - task: PublishBuildArtifacts@1
  #     inputs:
  #       pathToPublish: '$(Build.ArtifactStagingDirectory)'
  #       artifactName: drop
