trigger:
- develop
- master
- release/*
- hotfix/*

pr:
- develop
- release/*
- hotfix/*

jobs:
  # Build
  - job: Build
    pool:
      vmImage: 'windows-2022'
    steps:
    - powershell: ./build.ps1
      displayName: 'Build'
    - publish: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      artifact: NuGet Package
      displayName: 'Publish NuGet package as build artifact'
  # Integration Tests Windows (.NET Core tool)
  - job: Test_Windows_DotNetCoreTool
    displayName: Integration Tests Windows (.NET Core tool)
    dependsOn: Build
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install NodeJs 14.x'
    - powershell: choco install markdownlint-cli --no-progress
      displayName: 'Install required tools'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - powershell: ./build.ps1 --verbosity=diagnostic
      workingDirectory: ./tests/
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/output
      artifact: Integration Tests Windows (.NET Core tool)
      displayName: 'Publish generated reports as build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/tests/output'
        contents: '**/*.sarif'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Copy SARIF report'
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: CodeAnalysisLogs
  # Integration Tests macOS 10.15 (.NET Core tool)
  - job: Test_macOS_DotNetCoreTool
    displayName: Integration Tests macOS 10.15 (.NET Core tool)
    dependsOn: Build
    pool:
      vmImage: 'macOS-10.15'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install NodeJs 14.x'
    - bash: |
        npm install -g markdownlint-cli
      displayName: 'Install required tools'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - powershell: ./build.ps1 --verbosity=diagnostic
      workingDirectory: ./tests/
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/output
      artifact: Integration Tests macOS 10.15 (.NET Core tool)
      displayName: 'Publish generated reports as build artifact'
  # Integration Tests Ubuntu 16.04 (.NET Core tool)
  - job: Test_ubuntu_DotNetCoreTool
    displayName: Integration Tests Ubuntu 16.04 (.NET Core tool)
    dependsOn: Build
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install NodeJs 14.x'
    - bash: |
        npm install -g markdownlint-cli
      displayName: 'Install required tools'
    - download: current
      artifact: NuGet Package
      displayName: 'Download build artifact'
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Pipeline.Workspace)/NuGet Package
        targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
      displayName: 'Copy build artifact for test run'
    - powershell: ./build.ps1 --verbosity=diagnostic
      workingDirectory: ./tests/
      displayName: 'Run integration tests'
    - publish: $(Build.SourcesDirectory)/tests/output
      artifact: Integration Tests Ubuntu 16.04 (.NET Core tool)
      displayName: 'Publish generated reports as build artifact'
  # SARIF file deployment
  # - job: Deploy_Sarif_Files
  #   displayName: Sarif File deployment
  #   dependsOn: [ Test_Windows_DotNetFramework, Test_Windows_DotNetCoreTool, Test_macOS_Mono, Test_macOS_DotNetCoreTool, Test_ubuntu_Mono, Test_ubuntu_DotNetCoreTool ]
  #   pool:
  #     vmImage: 'ubuntu-16.04'
  #   steps:
  #   - task: PublishBuildArtifacts@1
  #     inputs:
  #       pathToPublish: '$(Build.ArtifactStagingDirectory)'
  #       artifactName: drop
